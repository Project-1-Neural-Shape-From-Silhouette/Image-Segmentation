# -*- coding: utf-8 -*-
"""binary segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MawPlYKxmq3JdNpDj_sui6KOM4ao_4Zx
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.filters import threshold_otsu
from scipy.ndimage import median_filter

def load_images_from_folder(folder):
    images = []
    filenames = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE)
        if img is not None:
            images.append(img)
            filenames.append(filename)
    return images, filenames

def preprocess_image(image):
    # Median filtering
    median_filtered = median_filter(image, size=3)
    return median_filtered

def binarize_image(image):
    # Otsu thresholding
    threshold = threshold_otsu(image)
    binary_image = (image > threshold).astype(np.uint8) * 255
    return binary_image

def process_image_dataset(input_folder, output_folder):
    images, filenames = load_images_from_folder(input_folder)
    binary_images = []

    for i, image in enumerate(images):
        preprocessed_image = preprocess_image(image)
        binary_image = binarize_image(preprocessed_image)
        binary_images.append(binary_image)

        # Save the binary image
        output_path = os.path.join(output_folder, filenames[i])
        cv2.imwrite(output_path, binary_image)

        # Display the original and binary images
        plt.subplot(1, 2, 1)
        plt.imshow(image, cmap='gray')
        plt.title("Original Image")
        plt.axis("off")

        plt.subplot(1, 2, 2)
        plt.imshow(binary_image, cmap='gray')
        plt.title("Binary Image")
        plt.axis("off")

        plt.show()

    return binary_images


input_folder = '/content/drive/My Drive/Colab Notebooks/HTCV/mic/train'
output_folder = '/content/drive/My Drive/Colab Notebooks/HTCV/output'

# Ensure the output folder exists
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

binary_images = process_image_dataset(input_folder, output_folder)
print("Processed {} images.".format(len(binary_images)))